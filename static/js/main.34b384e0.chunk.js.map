{"version":3,"sources":["redux/saved-state/saved-state.selector.js","pages/dragdrop/dragdrop.pages.jsx","redux/saved-state/saved-state.actions.js","App.js","reportWebVitals.js","redux/store.js","index.js","redux/saved-state/saved-state.reducer.jsx","redux/root.reducer.js","redux/saved-state/saved-state.types.js"],"names":["selectCurrentSavedState","createSelector","require","state","savedState","currentSavedState","DragDropPage","props","componentDidMount","setState","showModal","e","toShowModal","draggedDivRepeat","modalVisible","modalX","pageX","modalY","pageY","tempEvent","onDrop","handleOk","modalName","modalFontSize","modalFontWeight","trim","String","alert","handleCancel","onDragStart","ev","id","repeat","dataTransfer","setData","draggedDivId","onDragOver","preventDefault","handleChange","event","target","value","name","cat","setCurrentSavedState","getData","placed","counter","inputValues","tasks","find","task","key","JSON","parse","stringify","push","category","selected","positionx","positiony","fontSize","fontWeight","prevPlaced","handleInputChange","newValue","newInputValues","filter","iv","handleClick","newPlaced","pl","handleDelete","parseInt","keyCode","type","complete","this","length","forEach","t","draggable","className","onClick","style","position","top","left","placeholder","onChange","onKeyDown","tabIndex","AppstoreOutlined","marginRight","color","title","visible","onOk","onCancel","direction","width","disabled","Component","mapStateToProps","createStructuredSelector","connect","dispatch","SavedStateActionTypes","SET_CURRENT_SAVEDSTATE","payload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","default","createStore","applyMiddleware","store","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","INITIAL_STATE","savedStateReducer","rootReducer","combineReducers","persistConfig","storage","persistReducer"],"mappings":"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","file":"static/js/main.34b384e0.chunk.js","sourcesContent":["/** @format */\n\nconst { createSelector } = require('reselect');\n\nconst selectSavedState = state => state.savedState;\n\nconst selectCurrentSavedState = createSelector([selectSavedState], savedState => savedState.currentSavedState);\n\nexport { selectCurrentSavedState };\n","/** @format */\n\nimport React, { Component } from 'react';\nimport './dragdrop.styles.scss';\n\nimport { Modal, Input, Space } from 'antd';\n\nimport { AppstoreOutlined } from '@ant-design/icons';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { selectCurrentSavedState } from '../../redux/saved-state/saved-state.selector';\nimport { setCurrentSavedState } from '../../redux/saved-state/saved-state.actions';\n\nclass DragDropPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [\n                {\n                    key: 'label',\n                    name: 'This is a Label',\n                    category: 'wip',\n                    positionx: null,\n                    positiony: null,\n                    type: 'label',\n                },\n                {\n                    key: 'input',\n                    name: 'This is an Input',\n                    category: 'wip',\n                    positionx: null,\n                    positiony: null,\n                    type: 'input',\n                },\n                {\n                    key: 'button',\n                    name: 'This is a Button',\n                    category: 'wip',\n                    positionx: null,\n                    positiony: null,\n                    type: 'button',\n                },\n            ],\n            placed: [],\n            inputValues: [],\n            counter: 0,\n            modalVisible: false,\n            modalName: '',\n            modalFontSize: '',\n            modalFontWeight: '',\n            tempEvent: null,\n            draggedDivId: '',\n            draggedDivRepeat: '',\n            toShowModal: false,\n            modalX: '',\n            modalY: '',\n        };\n    }\n\n    // When component mounts, retrieve the previous stored redux data and set the state\n    componentDidMount = () => {\n        const { savedState } = this.props;\n        if (this.props.savedState) {\n            this.setState({\n                ...savedState,\n            });\n        }\n    };\n\n    // Function to show modal\n    showModal = e => {\n        const { toShowModal, draggedDivRepeat } = this.state;\n        const modalVisible = toShowModal ? true : false;\n        const modalX = e.pageX;\n        const modalY = e.pageY;\n\n        this.setState(\n            {\n                tempEvent: e,\n                modalVisible,\n                modalX,\n                modalY,\n            },\n            () => {\n                if (draggedDivRepeat) {\n                    this.onDrop(e, 'complete');\n                }\n            }\n        );\n    };\n\n    // Handle 'OK' click of modal\n    handleOk = () => {\n        const { modalName, modalFontSize, modalFontWeight, tempEvent } = this.state;\n\n        if (modalName.trim() !== '' && String(modalFontSize).trim() !== '' && String(modalFontWeight) !== '') {\n            this.setState(\n                {\n                    modalVisible: false,\n                    modalName,\n                    modalFontSize,\n                    modalFontWeight,\n                    tempEvent: null,\n                },\n                () => {\n                    this.onDrop(tempEvent, 'complete');\n                }\n            );\n        } else {\n            alert('Please fill in all the details');\n        }\n    };\n\n    // Handle closing of modal\n    handleCancel = () => {\n        this.setState({\n            modalVisible: false,\n        });\n    };\n\n    // Handling the start action of dragging an element\n    // The variable 'repeat' indicates if a new component is being added or\n    // if the same component is being dragged to a new place.\n    onDragStart = (ev, id, repeat = false) => {\n        const toShowModal = repeat ? false : true;\n\n        if (repeat) {\n            ev.dataTransfer.setData('id', id);\n            ev.dataTransfer.setData('repeat', repeat);\n        }\n\n        this.setState({\n            draggedDivId: id,\n            draggedDivRepeat: repeat,\n            toShowModal,\n        });\n    };\n\n    // Handling dragging of the component over draggable area\n    onDragOver = ev => {\n        ev.preventDefault();\n    };\n\n    // Handle input typing of modal inputs\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value });\n    };\n\n    // Handling of dropping event. This function also updates the state\n    // when a component is being dropped\n    onDrop = (ev, cat) => {\n        let repeat, id;\n        const { setCurrentSavedState } = this.props;\n\n        if (ev.dataTransfer.getData('repeat')) {\n            repeat = ev.dataTransfer.getData('repeat') === 'true' ? true : false;\n            id = ev.dataTransfer.getData('id');\n        } else {\n            repeat = this.state.draggedDivRepeat;\n            id = this.state.draggedDivId;\n        }\n\n        let placed = null;\n        let { counter, inputValues, modalName, modalFontSize, modalFontWeight } = this.state;\n        counter++;\n\n        if (cat === 'complete' && !repeat) {\n            placed = this.state.tasks;\n            placed = placed.find(task => task.key === id);\n            placed = JSON.parse(JSON.stringify(placed));\n            placed.key = placed.key + '-' + counter;\n            inputValues.push({\n                key: placed.key,\n                value: '',\n            });\n            placed.category = cat;\n            placed.selected = false;\n            placed.positionx = ev.pageX;\n            placed.positiony = ev.pageY;\n            placed.name = modalName;\n            placed.fontSize = modalFontSize;\n            placed.fontWeight = modalFontWeight;\n            const prevPlaced = this.state.placed;\n            placed = [placed, ...prevPlaced];\n        }\n\n        if (repeat) {\n            let prevPlaced = this.state.placed;\n            placed = prevPlaced.find(task => task.key === id);\n            placed.category = cat;\n            placed.positionx = ev.pageX;\n            placed.positiony = ev.pageY;\n            placed = [...prevPlaced];\n        }\n\n        this.setState(\n            {\n                placed,\n                counter,\n                inputValues,\n                toShowModal: false,\n                modalName: '',\n                modalFontSize: '',\n                modalFontWeight: '',\n            },\n            () => {\n                const savedState = this.state;\n                setCurrentSavedState(savedState);\n            }\n        );\n    };\n\n    // Handle input typing of input elements (which are dropped on the canvas)\n    handleInputChange = (e, key) => {\n        const newValue = e.target.value;\n        const { inputValues } = this.state;\n\n        const newInputValues = inputValues.filter(iv => {\n            if (iv.key === key) {\n                iv.value = newValue;\n            }\n\n            return iv;\n        });\n\n        this.setState({\n            inputValues: newInputValues,\n        });\n    };\n\n    // Handle selecting elements\n    handleClick = key => {\n        const { placed } = this.state;\n\n        const newPlaced = placed.filter(pl => {\n            if (pl.key === key) {\n                pl.selected = !pl.selected;\n            }\n\n            return pl;\n        });\n\n        this.setState({\n            placed: newPlaced,\n        });\n    };\n\n    // Handle deletion of elements\n    handleDelete = e => {\n        if (parseInt(e.keyCode) === 46) {\n            const { setCurrentSavedState } = this.props;\n            const { placed } = this.state;\n            const newPlaced = placed.filter(pl => {\n                if (!pl.selected) {\n                    return pl;\n                }\n                return null;\n            });\n\n            this.setState(\n                {\n                    placed: newPlaced,\n                },\n                () => {\n                    const savedState = this.state;\n                    setCurrentSavedState(savedState);\n                }\n            );\n        }\n    };\n\n    render() {\n        const tasks = {\n            complete: [],\n        };\n\n        const { inputValues, modalX, modalY, modalName, modalFontSize, modalFontWeight } = this.state;\n\n        // Load previously placed elements\n        if (this.state.placed.length > 0) {\n            this.state.placed.forEach(t => {\n                if (t.type === 'label') {\n                    tasks['complete'].push(\n                        <div\n                            key={t.key}\n                            onDragStart={e => this.onDragStart(e, t.key, true)}\n                            draggable\n                            className={t.selected ? 'draggable selected' : 'draggable'}\n                            onClick={() => {\n                                this.handleClick(t.key);\n                            }}\n                            style={{\n                                position: 'absolute',\n                                top: t.positiony - 50 + 'px',\n                                left: t.positionx - 160 + 'px',\n                                fontSize: t.fontSize + 'px',\n                                fontWeight: t.fontWeight,\n                            }}\n                        >\n                            {t.name}\n                        </div>\n                    );\n                } else if (t.type === 'input') {\n                    tasks['complete'].push(\n                        <input\n                            key={t.key}\n                            onDragStart={e => this.onDragStart(e, t.key, true)}\n                            onClick={() => {\n                                this.handleClick(t.key);\n                            }}\n                            draggable\n                            className={t.selected ? 'draggable selected' : 'draggable'}\n                            placeholder={t.name}\n                            style={{\n                                position: 'absolute',\n                                top: t.positiony - 50 + 'px',\n                                left: t.positionx - 160 + 'px',\n                                fontSize: t.fontSize + 'px',\n                                fontWeight: t.fontWeight,\n                            }}\n                            value={inputValues.find(iv => iv.key === t.key).value}\n                            onChange={e => {\n                                this.handleInputChange(e, t.key);\n                            }}\n                        ></input>\n                    );\n                } else {\n                    tasks['complete'].push(\n                        <button\n                            key={t.key}\n                            onDragStart={e => this.onDragStart(e, t.key, true)}\n                            onClick={() => {\n                                this.handleClick(t.key);\n                            }}\n                            draggable\n                            className={t.selected ? 'draggable selected' : 'draggable'}\n                            style={{\n                                position: 'absolute',\n                                top: t.positiony - 50 + 'px',\n                                left: t.positionx - 160 + 'px',\n                                fontSize: t.fontSize + 'px',\n                                fontWeight: t.fontWeight,\n                            }}\n                        >\n                            {t.name}\n                        </button>\n                    );\n                }\n            });\n        }\n\n        // Actual page rendering\n        return (\n            <div className='drag-drop-page' onKeyDown={e => this.handleDelete(e)} tabIndex='0'>\n                <div className='container-drag'>\n                    <div className='droppable' onDragOver={e => this.onDragOver(e)} onDrop={e => this.showModal(e)}>\n                        {tasks.complete}\n                    </div>\n                    <div\n                        className='wip'\n                        onDragOver={e => this.onDragOver(e)}\n                        onDrop={e => {\n                            this.onDrop(e, 'wip');\n                        }}\n                    >\n                        <h2>Blocks</h2>\n                        <div onDragStart={e => this.onDragStart(e, 'label')} draggable className='draggable'>\n                            <AppstoreOutlined style={{ marginRight: 8, color: '#D4D4D4' }} />\n                            Label\n                        </div>\n                        <div onDragStart={e => this.onDragStart(e, 'input')} draggable className='draggable'>\n                            <AppstoreOutlined style={{ marginRight: 8, color: '#D4D4D4' }} />\n                            Input\n                        </div>\n                        <div onDragStart={e => this.onDragStart(e, 'button')} draggable className='draggable'>\n                            <AppstoreOutlined style={{ marginRight: 8, color: '#D4D4D4' }} />\n                            Button\n                        </div>\n                    </div>\n                </div>\n                <Modal\n                    title='Edit Label'\n                    visible={this.state.modalVisible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                >\n                    <Space direction='vertical' style={{ width: '100%' }}>\n                        Text\n                        <Input\n                            type='text'\n                            placeholder='Enter text to be displayed inside element'\n                            name='modalName'\n                            value={modalName}\n                            onChange={this.handleChange}\n                        />\n                        X\n                        <Input type='text' value={modalX + 'px'} disabled />\n                        Y\n                        <Input type='text' value={modalY + 'px'} disabled />\n                        Font Size\n                        <Input\n                            type='number'\n                            placeholder='Enter font size (in px)'\n                            name='modalFontSize'\n                            value={modalFontSize}\n                            onChange={this.handleChange}\n                        />\n                        Font Weight\n                        <Input\n                            type='number'\n                            placeholder='Enter font weight'\n                            name='modalFontWeight'\n                            value={modalFontWeight}\n                            onChange={this.handleChange}\n                        />\n                    </Space>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentSavedState: savedState => {\n            dispatch(setCurrentSavedState(savedState));\n        },\n    };\n};\n\nconst mapStateToProps = createStructuredSelector({\n    savedState: selectCurrentSavedState,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DragDropPage);\n","/** @format */\n\nimport { SavedStateActionTypes } from './saved-state.types';\n\nconst setCurrentSavedState = savedState => {\n    return {\n        type: SavedStateActionTypes.SET_CURRENT_SAVEDSTATE,\n        payload: savedState,\n    };\n};\n\nexport { setCurrentSavedState };\n","/** @format */\n\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport DragDropPage from './pages/dragdrop/dragdrop.pages';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <DragDropPage />\n        </div>\n    );\n}\n\nexport default App;\n","/** @format */\n\nconst reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","/** @format */\n\nimport { persistStore } from 'redux-persist';\n\nconst { default: logger } = require('redux-logger');\nconst { createStore, applyMiddleware } = require('redux');\nconst { default: rootReducer } = require('./root.reducer');\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <PersistGate persistor={persistor}>\n                <App />\n            </PersistGate>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/** @format */\n\nimport { SavedStateActionTypes } from './saved-state.types';\n\nconst INITIAL_STATE = {\n    currentSavedState: null,\n};\n\nconst savedStateReducer = (state = INITIAL_STATE, { type, payload }) => {\n    switch (type) {\n        case SavedStateActionTypes.SET_CURRENT_SAVEDSTATE:\n            return {\n                ...state,\n                currentSavedState: payload,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default savedStateReducer;\n","/** @format */\n\nimport { combineReducers } from 'redux';\n\nimport savedStateReducer from './saved-state/saved-state.reducer';\n\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\n\nconst rootReducer = combineReducers({\n    savedState: savedStateReducer,\n});\n\nconst persistConfig = {\n    key: 'mini-page-builder-almabase',\n    storage: storage,\n};\n\nexport default persistReducer(persistConfig, rootReducer);\n","/** @format */\n\nexport const SavedStateActionTypes = {\n    SET_CURRENT_SAVEDSTATE: 'SET_CURRENT_SAVEDSTATE',\n};\n"],"sourceRoot":""}